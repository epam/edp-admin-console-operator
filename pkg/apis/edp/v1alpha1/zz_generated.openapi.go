// +build !ignore_autogenerated

// Code generated by openapi-gen. DO NOT EDIT.

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1alpha1

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"admin-console-operator/pkg/apis/edp/v1alpha1.AdminConsole":       schema_pkg_apis_edp_v1alpha1_AdminConsole(ref),
		"admin-console-operator/pkg/apis/edp/v1alpha1.AdminConsoleSpec":   schema_pkg_apis_edp_v1alpha1_AdminConsoleSpec(ref),
		"admin-console-operator/pkg/apis/edp/v1alpha1.AdminConsoleStatus": schema_pkg_apis_edp_v1alpha1_AdminConsoleStatus(ref),
	}
}

func schema_pkg_apis_edp_v1alpha1_AdminConsole(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AdminConsole is the Schema for the adminconsoles API",
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("admin-console-operator/pkg/apis/edp/v1alpha1.AdminConsoleSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("admin-console-operator/pkg/apis/edp/v1alpha1.AdminConsoleStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"admin-console-operator/pkg/apis/edp/v1alpha1.AdminConsoleSpec", "admin-console-operator/pkg/apis/edp/v1alpha1.AdminConsoleStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_edp_v1alpha1_AdminConsoleSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AdminConsoleSpec defines the desired state of AdminConsole",
				Properties: map[string]spec.Schema{
					"image": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"version": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"keycloakSpec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("admin-console-operator/pkg/apis/edp/v1alpha1.KeycloakSpec"),
						},
					},
					"edpSpec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("admin-console-operator/pkg/apis/edp/v1alpha1.EdpSpec"),
						},
					},
					"dbSpec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("admin-console-operator/pkg/apis/edp/v1alpha1.AdminConsoleDbSettings"),
						},
					},
				},
				Required: []string{"image", "version", "edpSpec"},
			},
		},
		Dependencies: []string{
			"admin-console-operator/pkg/apis/edp/v1alpha1.AdminConsoleDbSettings", "admin-console-operator/pkg/apis/edp/v1alpha1.EdpSpec", "admin-console-operator/pkg/apis/edp/v1alpha1.KeycloakSpec"},
	}
}

func schema_pkg_apis_edp_v1alpha1_AdminConsoleStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AdminConsoleStatus defines the observed state of AdminConsole",
				Properties: map[string]spec.Schema{
					"available": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"lastTimeUpdated": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "date-time",
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}
